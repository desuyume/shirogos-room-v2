generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Donate {
  id       Int     @id @default(autoincrement())
  username String
  amount   Float?  @default(0)
  gifts    String? @default("")

  @@map("donates")
}

model UniqueRole {
  id    Int                  @id @default(autoincrement())
  title String               @unique
  type  UniqueRoleType
  cost  Int                  @default(100)
  rooms UniqueRolesOnRooms[]

  @@map("unique_roles")
}

enum UniqueRoleType {
  ADJECTIVES
  NOUNS
}

enum Gender {
  MALE
  FEMALE
}

model User {
  id                   Int              @id @default(autoincrement())
  username             String           @unique
  email                String
  gender               Gender           @default(value: MALE)
  birthday             DateTime?
  dangos               Int              @default(0)
  level                Int              @default(1)
  exp                  Int              @default(0)
  panopticons          Int              @default(0)
  games_ordered        Int              @default(0)
  viewing_ordered      Int              @default(0)
  clips                Int              @default(0)
  legendary_exams      Int              @default(0)
  fraction_tournaments Int              @default(0)
  past_usernames       PastUsername[]
  profile_img          String?
  miniature_img        String?
  role                 String           @default("user")
  twitch               TwitchProfile    @relation(fields: [twitchId], references: [id])
  twitchId             Int              @unique
  discord              DiscordProfile?  @relation(fields: [discordId], references: [id])
  discordId            Int?             @unique
  vk                   VkProfile?       @relation(fields: [vkId], references: [id])
  vkId                 Int?             @unique
  telegram             TelegramProfile? @relation(fields: [telegramId], references: [id])
  telegramId           Int?             @unique
  Token                Token?
  Order                Order[]
  Room                 Room?

  @@map("users")
}

model PastUsername {
  id         Int      @id @default(autoincrement())
  username   String
  created_at DateTime @default(now())
  User       User?    @relation(fields: [userId], references: [id])
  userId     Int?

  @@map("past_usernames")
}

model Token {
  id           Int    @id @default(autoincrement())
  accessToken  String @unique
  refreshToken String @unique
  user         User   @relation(fields: [userId], references: [id])
  userId       Int    @unique

  @@map("tokens")
}

model RoomBackground {
  id                Int                 @id @default(autoincrement())
  name              String?
  cost              Int                 @default(0)
  img               String
  Room              Room[]
  BackroundsOnRooms BackroundsOnRooms[]

  @@map("room_backgrounds")
}

model Panopticon {
  id                 Int                  @id @default(autoincrement())
  title              String?
  description        String?
  cost               Int                  @default(0)
  img                String
  PanopticonsOnRooms PanopticonsOnRooms[]

  @@map("panopticons")
}

model Room {
  id                             Int                  @id @default(autoincrement())
  name                           String
  created_at                     DateTime             @default(now())
  room_colors                    String[]             @default(["pink"])
  active_room_color              String               @default("pink")
  username_colors                String[]             @default(["pink"])
  active_username_color          String               @default("pink")
  unique_roles                   UniqueRolesOnRooms[]
  selected_unique_role_adjective String?
  selected_unique_role_noun      String?
  random_unique_role_adjective   String?
  random_unique_role_noun        String?
  favorite_character             Character?           @relation(fields: [characterId], references: [id])
  characterId                    String?
  buyed_backgrounds              BackroundsOnRooms[]
  selected_background            RoomBackground?      @relation(fields: [roomBackgroundId], references: [id])
  roomBackgroundId               Int?
  buyed_panopticons              PanopticonsOnRooms[]
  buyed_awards                   AwardsOnRooms[]
  user                           User                 @relation(fields: [userId], references: [id])
  userId                         Int                  @unique

  @@map("rooms")
}

model BackroundsOnRooms {
  id               Int            @id @default(autoincrement())
  Room             Room           @relation(fields: [roomId], references: [id])
  roomId           Int
  RoomBackground   RoomBackground @relation(fields: [roomBackgroundId], references: [id])
  roomBackgroundId Int
}

model PanopticonsOnRooms {
  id           Int        @id @default(autoincrement())
  Room         Room       @relation(fields: [roomId], references: [id])
  roomId       Int
  Panopticon   Panopticon @relation(fields: [panopticonId], references: [id])
  panopticonId Int
  buyed_at     DateTime   @default(now())
  buyed_cost   Int
}

model AwardsOnRooms {
  id      Int   @id @default(autoincrement())
  Room    Room  @relation(fields: [roomId], references: [id])
  roomId  Int
  Award   Award @relation(fields: [awardId], references: [id])
  awardId Int
}

model RoomColor {
  id   Int    @id @default(autoincrement())
  name String @unique
  hex  String @unique
  cost Int

  @@map("room_colors")
}

model UsernameColor {
  id   Int    @id @default(autoincrement())
  name String @unique
  hex  String @unique
  cost Int

  @@map("username_colors")
}

model UniqueRolesOnRooms {
  Room         Room       @relation(fields: [roomId], references: [id])
  roomId       Int
  UniqueRole   UniqueRole @relation(fields: [uniqueRoleId], references: [id])
  uniqueRoleId Int

  @@id([roomId, uniqueRoleId])
}

model TwitchProfile {
  id          Int     @id @default(autoincrement())
  login       String
  displayName String
  email       String
  profile_img String?
  User        User?

  @@map("twitch_profiles")
}

model DiscordProfile {
  id          Int     @id @default(autoincrement())
  login       String
  displayName String
  email       String
  profile_img String?
  User        User?

  @@map("discord_profiles")
}

model VkProfile {
  id          Int     @id @default(autoincrement())
  login       String
  displayName String
  email       String
  profile_img String?
  User        User?

  @@map("vk_profiles")
}

model TelegramProfile {
  id          Int     @id @default(autoincrement())
  login       String
  displayName String
  email       String
  profile_img String?
  User        User?

  @@map("telegram_profiles")
}

enum OrderStatus {
  PENDING
  COMPLETED
  REJECTED
}

model Order {
  id           Int         @id @default(autoincrement())
  user         User        @relation(fields: [userId], references: [id])
  orderType    OrderType   @relation(fields: [orderTypeId], references: [id])
  orderPrice   OrderPrice  @relation(fields: [orderPriceId], references: [id])
  userId       Int
  orderTypeId  Int
  orderText    String
  status       OrderStatus @default(value: PENDING)
  orderPriceId Int
  isByAdmin    Boolean     @default(false)

  @@map("orders")
}

model OrderType {
  id          Int          @id @default(autoincrement())
  type        String       @unique
  orderRules  String?
  orderPrices OrderPrice[]
  Order       Order[]

  @@map("order_types")
}

model OrderPrice {
  id          Int       @id @default(autoincrement())
  order       OrderType @relation(fields: [orderTypeId], references: [id])
  orderTypeId Int
  cost        Int
  text        String
  Order       Order[]

  @@map("order_prices")
}

enum AwardCategory {
  BOUTIQUE
  SPECIAL
}

model Award {
  id            Int             @id @default(autoincrement())
  cost          Int             @default(0)
  title         String
  awardType     AwardType       @relation(fields: [awardTypeId], references: [id])
  awardTypeId   Int
  award_img     String
  category      AwardCategory   @default(value: BOUTIQUE)
  AwardsOnRooms AwardsOnRooms[]

  @@map("awards")
}

model AwardType {
  id    Int     @id @default(autoincrement())
  title String  @unique
  type  String  @unique
  Award Award[]

  @@map("award_types")
}

model OnlineOption {
  id    Int    @id @default(autoincrement())
  title String

  @@map("online_options")
}

model BirthdayAward {
  id    Int @id @default(autoincrement())
  award Int

  @@map("birthday_awards")
}

model News {
  id         Int      @id @default(autoincrement())
  text       String
  news_img   String
  created_at DateTime @default(now())

  @@map("news")
}

model Chronicle {
  id     Int              @id @default(autoincrement())
  year   Int
  month  Int
  events ChronicleEvent[]

  @@map("chronicles")
}

model ChronicleEvent {
  id          Int        @id @default(autoincrement())
  day         Int
  prefix      String?
  text        String?
  img         String?
  Chronicle   Chronicle? @relation(fields: [chronicleId], references: [id])
  chronicleId Int?

  @@map("chronicle_events")
}

model Character {
  id                       String                    @id @unique
  name                     String
  subTitle                 String?
  subSubTitle              String?
  category                 CharacterCategory?        @relation(fields: [characterCategoryId], references: [id])
  original_img             String?
  miniature_img            String?
  characterDescriptions    CharacterDescription[]
  characterCharacteristics CharacterCharacteristic[]
  Room                     Room[]
  characterCategoryId      Int?

  @@map("characters")
}

model CharacterDescription {
  id          Int        @id @default(autoincrement())
  title       String
  description String
  characterId String?
  Character   Character? @relation(fields: [characterId], references: [id])

  @@map("character_descriptions")
}

model CharacterCharacteristic {
  id             Int        @id @default(autoincrement())
  title          String
  characteristic String
  characterId    String?
  Character      Character? @relation(fields: [characterId], references: [id])

  @@map("character_characteristics")
}

model CharacterCategory {
  id        Int         @id @default(autoincrement())
  title     String      @unique
  Character Character[]
}

model Manga {
  id           String         @id @unique
  title        String
  cover_img    String
  description  String
  MangaChapter MangaChapter[]
}

model MangaChapter {
  id        Int         @id @default(autoincrement())
  chapter   Int
  mangaId   String
  Manga     Manga?      @relation(fields: [mangaId], references: [id])
  MangaPage MangaPage[]
}

model MangaPage {
  id             Int           @id @default(autoincrement())
  page_number    Int
  page_img       String
  mangaChapterId Int?
  MangaChapter   MangaChapter? @relation(fields: [mangaChapterId], references: [id])
}
